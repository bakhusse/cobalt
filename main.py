import asyncio
import logging
import json
import os
import threading
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    Bot,
    InputFile,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
)
from aiohttp import ClientSession, CookieJar
from bs4 import BeautifulSoup
from flask import Flask, request, Response, redirect, session as flask_session, make_response
import uuid
import requests

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7690678050:AAGBwTdSUNgE7Q6Z2LpE6481vvJJhetrO-4"
bot = Bot(TOKEN)

# –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–æ–∫—Å–∏/Flask-—Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = os.getenv("BASE_URL", "https://mpets.duckdns.org/")


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
USERS_FILE = os.path.join(BASE_DIR, "users.txt")

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID Telegram) –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ALLOWED_USER_IDS = [1811568463, 630965641]

TEMP_LOGINS = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Å—Å–∏–π
user_sessions = {}        # —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {session_name: {...}}}
user_tasks = {}           # –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ { (user_id, session_name): task }
pending_cookies = {}      # –∫—É–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {(user_id, session_name): cookies_dict}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è WebApp
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET", "dev_secret")  # —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ Flask

# –ß—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def read_from_file():
    if not os.path.exists(USERS_FILE): return []
    sessions = []
    with open(USERS_FILE, 'r') as f:
        for line in f:
            parts = line.strip().split(' | ')
            if len(parts) != 4:
                logging.warning(f"Bad line: {line.strip()}")
                continue
            name, owner, uid, cj = parts
            try:
                cookies = json.loads(cj)
            except:
                logging.error(f"JSON parse error for session {name}")
                continue
            sessions.append({
                'session_name': name,
                'owner': owner,
                'user_id': int(uid),
                'cookies': cookies,
            })
    return sessions

# –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü)
def write_to_file(session_name, owner, user_id, cookies):
    if session_name is None:
        logging.warning(f"–ü—ã—Ç–∞—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –∏–º–µ–Ω–µ–º None! –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return
    with open(USERS_FILE, 'a') as f:
        f.write(f"{session_name} | {owner} | {user_id} | {json.dumps(cookies)}\n")
    logging.info(f"Session {session_name} saved to file.")


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def load_sessions():
    for sess in read_from_file():
        cookies = ({c['name']:c['value'] for c in sess['cookies']} 
                   if isinstance(sess['cookies'], list) else sess['cookies'])
        user_sessions.setdefault(sess['user_id'], {})[sess['session_name']] = {
            'owner': sess['owner'],
            'cookies': cookies,
            'active': False,
        }


# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π", callback_data="list")],
        [InlineKeyboardButton("üõü –ü–æ–º–æ—â—å",        callback_data="guide")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",    callback_data="info")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç Cobalt, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–≥—Ä—ã –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ü–∏—Ç–æ–º—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ mpets.mobi. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö) –Ω–∞ '–ø—Ä–æ–∫–∞—á–∫—É', —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "–í—Å–µ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ö–æ—Ä–º–ª–µ–Ω–∏–µ, –ò–≥—Ä–∞, –í—ã—Å—Ç–∞–≤–∫–∞, –ü—Ä–æ–≥—É–ª–∫–∞, –ü–æ–∏—Å–∫ —Å–µ–º—è–Ω.\n"
        "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–æ—Ç–µ —Ç—Ä–µ–±—É—é—Ç—Å—è cookie. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö, —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤ /guide.\n\n"
        "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/info ‚Äì –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/guide ‚Äì –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é cookie\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "/del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/list ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏\n"
        "/on ‚Äì –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/off ‚Äì –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é\n"
        "/stats <–∏–º—è_—Å–µ—Å—Å–∏–∏> ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞\n"
        "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# –ö–æ–º–∞–Ω–¥–∞ /info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏ –∫–∞–Ω–∞–ª–µ
async def info(update: Update, context: CallbackContext):
    message = (
        "üì¨ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: [t.me/bakhusse](https://t.me/bakhusse)\n"
        "üì§ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: [t.me/cobalt_mpets](https://t.me/cobalt_mpets)"
    )
    await update.message.reply_text(message, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /guide ‚Äì –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é cookie (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è WebApp)
async def guide(update: Update, context: CallbackContext):
    message = (
        "üòç –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å cookie –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram!\n"
        "üëâ–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n"
        "‚ùó–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏–º—è —Å–µ—Å—Å–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é."
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
async def add_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è —Å–µ—Å—Å–∏–∏
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return
    session_name = context.args[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions and session_name in user_sessions[user_id]:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º `{session_name}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode='Markdown')
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp (–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    tgid = user_id
    webapp_url = f"https://mpets.duckdns.org//?tgid={tgid}&name={session_name}"
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_info = WebAppInfo(url=webapp_url)
    button = InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ MPets", web_app=web_app_info)
    keyboard = InlineKeyboardMarkup([[button]])
    await update.message.reply_text(
        f"üëá –î–ª—è —Å–µ—Å—Å–∏–∏ *{session_name}* –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ MPets:",
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ '{session_name}' —á–µ—Ä–µ–∑ WebApp.")

# –ö–æ–º–∞–Ω–¥–∞ /confirm ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebApp
async def confirm_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    session_name = None
    cookies = None
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å–µ—Å—Å–∏–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –¥–ª—è –Ω–µ—ë
    if context.args:
        session_name = context.args[0]
        key = (user_id, session_name)
        cookies = pending_cookies.get(key)
        if not cookies:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ `{session_name}`. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.", parse_mode='Markdown')
            return
    else:
        # –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –æ–∂–∏–¥–∞—é—â–∞—è —Å–µ—Å—Å–∏—è ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        pending_for_user = [name for (uid, name) in pending_cookies.keys() if uid == user_id]
        if not pending_for_user:
            await update.message.reply_text("–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add.")
            return
        if len(pending_for_user) > 1:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ /confirm <–∏–º—è_—Å–µ—Å—Å–∏–∏> –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö."
            )
            return
        # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–∂–∏–¥–∞—é—â–∞—è —Å–µ—Å—Å–∏—è
        session_name = pending_for_user[0]
        cookies = pending_cookies.get((user_id, session_name))
        if not cookies:
            await update.message.reply_text("–ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /add.")
            return
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ user_sessions
    user_sessions.setdefault(user_id, {})
    if session_name in user_sessions[user_id]:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä., –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è `{session_name}` —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", parse_mode='Markdown')
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –µ—Å—Ç—å
        pending_cookies.pop((user_id, session_name), None)
        return
    user_sessions[user_id][session_name] = {
        "owner": update.message.from_user.username or "",
        "cookies": cookies,
        "active": False
    }
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª
    write_to_file(session_name, update.message.from_user.username or "", user_id, cookies)
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—É–∫–∏
    pending_cookies.pop((user_id, session_name), None)
    await update.message.reply_text(f"–°–µ—Å—Å–∏—è *{session_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /on.", parse_mode='Markdown')
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å–µ—Å—Å–∏—é '{session_name}'.")

# –ö–æ–º–∞–Ω–¥–∞ /del ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
async def remove_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return
    session_name = context.args[0]
    ok = remove_session_data(user_id, session_name)
    if ok:
        await update.message.reply_text(f"üóëÔ∏è –°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def remove_session_data(user_id, session_name):
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
    if user_id in user_sessions and session_name in user_sessions[user_id]:
        if user_sessions[user_id][session_name]["active"]:
            task = user_tasks.pop((user_id, session_name), None)
            if task:
                task.cancel()
        user_sessions[user_id].pop(session_name, None)
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    sessions = read_from_file()
    new_sessions = [s for s in sessions if not (s['user_id'] == user_id and s['session_name'] == session_name)]
    with open(USERS_FILE, "w") as file:
        for s in new_sessions:
            cookies_json = json.dumps(s['cookies'])
            file.write(f"{s['session_name']} | {s['owner']} | {s['user_id']} | {cookies_json}\n")
    logging.info(f"–°–µ—Å—Å–∏—è {session_name} —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def list_sessions(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in user_sessions and user_sessions[user_id]:
        sessions_list = "\n".join([f"‚Ä¢ {name} ({'üü¢' if data['active'] else 'üî¥'})" for name, data in user_sessions[user_id].items()])
        await update.message.reply_text(f"ü§ñ –í–∞—à–∏ —Å–µ—Å—Å–∏–∏:\n{sessions_list}")
    else:
        await update.message.reply_text("ü§∑‚Äç‚ôÄÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")

async def list_sessions_buttons(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    sessions = user_sessions.get(user_id, {})
    keyboard = []
    for name, data in sessions.items():
        status = '–í–∫–ª' if data['active'] else '–í—ã–∫–ª'
        keyboard.append([InlineKeyboardButton(f"{name} ({status})", callback_data=f"session:{name}")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")])
    await update.message.reply_text(
        "ü§ñ –í–∞—à–∏ —Å–µ—Å—Å–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ö–æ–º–∞–Ω–¥–∞ /on ‚Äì –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏
async def activate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /on <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /on all")
        return
    session_name = context.args[0]
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "all", –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            for name, session in user_sessions[user_id].items():
                if not session["active"]:
                    session["active"] = True
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                    task = asyncio.create_task(auto_actions(session["cookies"], name))
                    user_tasks[(user_id, name)] = task
            await update.message.reply_text("‚úÖ –í—Å–µ –≤–∞—à–∏ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã!")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            if user_sessions[user_id][session_name]["active"]:
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            else:
                user_sessions[user_id][session_name]["active"] = True
                task = asyncio.create_task(auto_actions(user_sessions[user_id][session_name]["cookies"], session_name))
                user_tasks[(user_id, session_name)] = task
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
                logging.info(f"–°–µ—Å—Å–∏—è {session_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /off ‚Äì –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏
async def deactivate_session(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /off <–∏–º—è_—Å–µ—Å—Å–∏–∏> –∏–ª–∏ /off all")
        return
    session_name = context.args[0]
    if session_name == "all":
        if user_id in user_sessions and user_sessions[user_id]:
            for name, session in user_sessions[user_id].items():
                if session["active"]:
                    session["active"] = False
                    task = user_tasks.get((user_id, name))
                    if task:
                        task.cancel()
                        user_tasks.pop((user_id, name), None)
                    logging.info(f"–°–µ—Å—Å–∏—è {name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            await update.message.reply_text("üõë –í—Å–µ —Å–µ—Å—Å–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
    else:
        if user_id in user_sessions and session_name in user_sessions[user_id]:
            if user_sessions[user_id][session_name]["active"]:
                user_sessions[user_id][session_name]["active"] = False
                task = user_tasks.get((user_id, session_name))
                if task:
                    task.cancel()
                    user_tasks.pop((user_id, session_name), None)
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                logging.info(f"–°–µ—Å—Å–∏—è {session_name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            else:
                await update.message.reply_text(f"–°–µ—Å—Å–∏—è {session_name} —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /stats ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
async def stats(update: Update, context: CallbackContext):
    if len(context.args) < 1:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
    user_id = update.message.from_user.id
    name = context.args[0]
    text = await fetch_stats_for_session(user_id, name)
    await update.message.reply_text(text)


async def fetch_stats_for_session(user_id: int, session_name: str) -> str:
    # —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ —É –≤–∞—Å –≤ stats(), –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
    if user_id not in user_sessions or session_name not in user_sessions[user_id]:
        return f"–°–µ—Å—Å–∏—è ¬´{session_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    cookies = user_sessions[user_id][session_name]["cookies"]
    if isinstance(cookies, list):
        cookies = {c["name"]: c["value"] for c in cookies}
    sess = requests.Session()
    sess.headers.update({"User-Agent":"Mozilla/5.0"})
    sess.cookies.update(cookies)

    loop = asyncio.get_event_loop()
    try:
        # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–∫–∏
        await loop.run_in_executor(None, lambda: sess.get("https://mpets.mobi/", allow_redirects=True, timeout=10))
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        resp = await loop.run_in_executor(None, lambda: sess.get("https://mpets.mobi/profile", allow_redirects=False, timeout=10))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}"

    if resp.status_code in (301,302):
        return (
            f"‚ùå –°–µ—Å—Å–∏—è ¬´{session_name}¬ª –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.\n"
            f"–í–≤–µ–¥–∏ `/add {session_name}` –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∑–∞–Ω–æ–≤–æ."
        )
    if resp.status_code != 200:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {resp.status_code}"

    page = resp.text
    soup = BeautifulSoup(page, "html.parser")
    items = soup.find_all("div", class_="stat_item")
    if not items:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ."

    name_tag = items[0].find("a", class_="darkgreen_link")
    name = name_tag.text.strip() if name_tag else "‚Äî"
    level = items[0].text.strip().split()[-2] if name_tag else "‚Äî"
    stats_map = {k:"‚Äî" for k in ["–û–ø—ã—Ç","–ö—Ä–∞—Å–æ—Ç–∞","–ú–æ–Ω–µ—Ç—ã","–°–µ—Ä–¥–µ—á–∫–∏","VIP-–∞–∫–∫–∞—É–Ω—Ç"]}
    for itm in items:
        txt = itm.text.strip()
        for key in stats_map:
            if f"{key}:" in txt:
                stats_map[key] = txt.split(f"{key}:")[-1].strip()

    return (
        f"üêæ {name}, —É—Ä–æ–≤–µ–Ω—å {level}\n"
        f"‚ú® –û–ø—ã—Ç: {stats_map['–û–ø—ã—Ç']}\n"
        f"üíÑ –ö—Ä–∞—Å–æ—Ç–∞: {stats_map['–ö—Ä–∞—Å–æ—Ç–∞']}\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {stats_map['–ú–æ–Ω–µ—Ç—ã']}\n"
        f"‚ù§Ô∏è –°–µ—Ä–¥–µ—á–∫–∏: {stats_map['–°–µ—Ä–¥–µ—á–∫–∏']}\n"
        f"üëë VIP: {stats_map['VIP-–∞–∫–∫–∞—É–Ω—Ç']}"
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —Å–µ—Å—Å–∏–∏
async def get_user(update: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    user_id = update.message.from_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_user <–∏–º—è_—Å–µ—Å—Å–∏–∏>")
        return

    session_name = context.args[0]

    session_info = read_from_file()
    for session in session_info:
        if session["session_name"] == session_name:
            response = f"–°–µ—Å—Å–∏—è: {session_name}\n"
            response += f"–í–ª–∞–¥–µ–ª–µ—Ü: {session['owner']}\n"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫
            cookies = json.dumps(session['cookies'], indent=4)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É–∫–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            hidden_cookies = f"```json\n{cookies}```"  # –°–∫—Ä—ã–≤–∞–µ–º –∫—É–∫–∏ –≤ –±–ª–æ–∫–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–º –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è

            response += f"–ö—É–∫–∏:\n {hidden_cookies}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É —Å –∫—É–∫–∞–º–∏

            await update.message.reply_text(response, parse_mode='Markdown')
            return

    await update.message.reply_text(f"–°–µ—Å—Å–∏—è —Å –∏–º–µ–Ω–µ–º {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –ø–∏—Ç–æ–º—Ü–∞)
async def auto_actions(session_cookies, session_name):
    # URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    actions = [
        "https://mpets.mobi/?action=food",
        "https://mpets.mobi/?action=play",
        "https://mpets.mobi/show",
        "https://mpets.mobi/glade_dig",
        "https://mpets.mobi/show_coin_get",
        "https://mpets.mobi/task_reward?id=46",
        "https://mpets.mobi/task_reward?id=49",
        "https://mpets.mobi/task_reward?id=52",
        "https://mpets.mobi/sell_all?confirm=1"
    ]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å cookies (–µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤)
    cookies_dict = {c['name']: c['value'] for c in session_cookies} if isinstance(session_cookies, list) else (session_cookies.get("cookies", {}) if "cookies" in session_cookies else session_cookies)
    # –°–æ–∑–¥–∞—ë–º aiohttp-—Å–µ—Å—Å–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ cookie
    cookie_jar = CookieJar()
    for name, value in cookies_dict.items():
        cookie_jar.update_cookies({name: value})
    async with ClientSession(cookie_jar=cookie_jar) as web_session:
        while True:
            if asyncio.current_task().cancelled():
                logging.info(f"–ê–≤—Ç–æ–∑–∞–¥–∞—á–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return
            # –ü–µ—Ä–≤—ã–µ 4 –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ–º 6 —Ä–∞–∑ —Å –ø–∞—É–∑–æ–π 1 —Å–µ–∫
            for action_url in actions[:4]:
                for _ in range(6):
                    await visit_url(web_session, action_url, session_name)
                    await asyncio.sleep(5)
            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ 1 —Ä–∞–∑—É
            for action_url in actions[4:]:
                await visit_url(web_session, action_url, session_name)
                await asyncio.sleep(5)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º id –æ—Ç 10 –¥–æ 1
            for i in range(10, 0, -1):
                url = f"https://mpets.mobi/go_travel?id={i}"
                await visit_url(web_session, url, session_name)
                await asyncio.sleep(5)
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (60 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(120)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def visit_url(web_session, url, session_name):
    try:
        async with web_session.get(url) as response:
            if response.status == 200:
                logging.info(f"[{session_name}] –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ {url} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ {url}.")
    except Exception as e:
        logging.error(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")



async def list_sessions_buttons(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    sessions = user_sessions.get(user_id, {})
    keyboard = []
    for name, data in sessions.items():
        status = 'üü¢' if data['active'] else 'üî¥'
        keyboard.append([InlineKeyboardButton(f"{name} ({status})", callback_data=f"session:{name}")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")])
    await update.message.reply_text(
        "ü§ñ –í–∞—à–∏ —Å–µ—Å—Å–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def activate_session(update: Update, context: CallbackContext): pass  # unchanged
async def deactivate_session(update: Update, context: CallbackContext): pass
async def get_user(update: Update, context: CallbackContext): pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    back_list = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list")]])
    back_menu = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]])

    if data == "main":
        # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π", callback_data="list")],
            [InlineKeyboardButton("üõü –ü–æ–º–æ—â—å",        callback_data="guide")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",    callback_data="info")],
        ]
        return await query.edit_message_text(
            "üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if data == "info":
        return await query.edit_message_text(
            "üì¨ –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @bakhusse\n"
            "üì§ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: @cobalt_mpets",
            reply_markup=back_menu
        )

    # –ü–æ–º–æ—â—å
    if data == "guide":
        return await query.edit_message_text(
            "üòç –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç—å cookie –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
            "üëâ –ù–∞–∂–º–∏ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª –∏–ª–∏ –≤–≤–µ–¥–∏ /add <–∏–º—è_—Å–µ—Å—Å–∏–∏>",
            reply_markup=back_menu
        )

    # –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    if data == "list":
        sessions = user_sessions.get(user_id, {})
        keyboard = [
            [InlineKeyboardButton(f"{name} ({'üü¢' if sess['active'] else 'üî¥'})",
                                  callback_data=f"session:{name}")]
            for name, sess in sessions.items()
        ]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])
        return await query.edit_message_text(
            "ü§ñ –í–∞—à–∏ —Å–µ—Å—Å–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    if data == "add":
        webapp_url = f"{BASE_URL}?tgid={user_id}&new=1"
        kb = [
            [InlineKeyboardButton(
                "üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –¥–æ–±–∞–≤–∏—Ç—å",
                web_app=WebAppInfo(url=webapp_url)
            )],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")]
        ]
        return await query.edit_message_text(
            "üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–¥ —Ç–≤–æ–∏–º –Ω–∏–∫–æ–º:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    if data.startswith("stats:"):
        name = data.split(":", 1)[1]
        text = await fetch_stats_for_session(user_id, name)
        return await query.edit_message_text(
            text,
            reply_markup=back_list
        )

    # –í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if data.startswith("session:"):
        name = data.split(":", 1)[1]
        sess = user_sessions.get(user_id, {}).get(name)
        if not sess:
            return await query.edit_message_text("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        kb = []
        if sess["active"]:
            kb.append([InlineKeyboardButton("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"off:{name}")])
        else:
            kb.append([InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data=f"on:{name}")])
        kb.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{name}")])
        kb.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats:{name}")])
        #launch_url = f"{BASE_URL}launch/{user_id}/{name}"
        #kb.append([InlineKeyboardButton(
        #    "üîë –û—Ç–∫—Ä—ã—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
        #    web_app=WebAppInfo(url=launch_url)
        #)])
        kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="list")])
        return await query.edit_message_text(
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π ¬´{name}¬ª:",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # –í–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é
    if data.startswith("on:"):
        name = data.split(":", 1)[1]
        session = user_sessions[user_id][name]
        if not session["active"]:
            session["active"] = True
            task = asyncio.create_task(auto_actions(session["cookies"], name))
            user_tasks[(user_id, name)] = task
        return await query.edit_message_text(
            f"‚úÖ –°–µ—Å—Å–∏—è ¬´{name}¬ª –≤–∫–ª—é—á–µ–Ω–∞!",
            reply_markup=back_list
        )

    # –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Å—Å–∏—é
    if data.startswith("off:"):
        name = data.split(":", 1)[1]
        session = user_sessions[user_id][name]
        if session["active"]:
            session["active"] = False
            task = user_tasks.pop((user_id, name), None)
            if task:
                task.cancel()
        return await query.edit_message_text(
            f"‚èπÔ∏è –°–µ—Å—Å–∏—è ¬´{name}¬ª –≤—ã–∫–ª—é—á–µ–Ω–∞!",
            reply_markup=back_list
        )

    # –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é
    if data.startswith("del:"):
        name = data.split(":", 1)[1]
        ok = remove_session_data(user_id, name)
        return await query.edit_message_text(
            f"üóëÔ∏è –°–µ—Å—Å–∏—è ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞!" if ok else f"–°–µ—Å—Å–∏—è ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=back_list
        )

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if data.startswith("del:"):
        name = data.split(":", 1)[1]
        remove_session_data(user_id, name)
        return await query.edit_message_text(
            f"üóëÔ∏è –°–µ—Å—Å–∏—è ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=back_list
        )

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return await query.edit_message_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
        reply_markup=back_menu
    )


# Flask –º–∞—Ä—à—Ä—É—Ç: –∫–æ—Ä–Ω–µ–≤–æ–π ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ MPets
@app.route('/')
def webapp_root():
    print("QUERY:", request.args)
    tgid = request.args.get("tgid")
    is_new = request.args.get("new") == '1'
    session_name = request.args.get("name")
    print("SESSION_NAME:", session_name)
    if not tgid:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç tgid.", 400
    flask_session['tgid'] = int(tgid)
    flask_session['is_new'] = is_new
    flask_session['session_name'] = session_name
    print("FLASK_SESSION after set:", flask_session)
    return redirect("/profile")


# –ó–∞–º–µ–Ω—ë–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–æ Flask:

@app.route('/', defaults={'url_path': ''}, methods=['GET', 'POST'])
@app.route('/<path:url_path>', methods=['GET', 'POST'])
def proxy_mpets(url_path):
    qs = request.query_string.decode('utf-8')
    target_url = f"https://mpets.mobi/{url_path}"
    if qs:
        target_url += f"?{qs}"

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω –∏ PHPSESSID –ø—Ä–∏ POST –Ω–∞ /login
    try:
        headers = {k: v for k, v in request.headers if k.lower() != 'host'}
        if request.method == 'POST':
            if url_path.lower() == 'login':
                print("DEBUG request.form:", dict(request.form))
                login_field = request.form.get('name')  # <- —Ç–æ–ª—å–∫–æ name, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ!
                print(f"[DEBUG] –ü–æ–π–º–∞–ª –ª–æ–≥–∏–Ω (name): {login_field}")
                LAST_LOGIN = login_field  # –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –≥–ª–æ–±–∞–ª–∫—É
            resp = requests.post(target_url,
                                 data=request.form,
                                 headers=headers,
                                 cookies=request.cookies,
                                 allow_redirects=False)
        else:
            resp = requests.get(target_url,
                                headers=headers,
                                cookies=request.cookies,
                                allow_redirects=False)
    except Exception as e:
        logging.error(f"Proxy error to {target_url}: {e}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MPets.", 502


    tgid = flask_session.get('tgid')
    session_name = flask_session.get('session_name')
    loop = asyncio.get_event_loop()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞)
    if url_path.lower() == 'login' and resp.status_code in (301, 302):
        location = resp.headers.get('Location', '')

        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ç–≤–æ–π —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫, –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–π
        if 'error=' in location:
            err = request.args.get('error', 'unknown')
            nick = request.args.get('prev_name', '')
            if tgid:
                loop.create_task(bot.send_message(
                    chat_id=tgid,
                    text=(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ¬´{session_name}¬ª!\n"
                          f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {err}\n"
                          f"–ù–∏–∫–Ω–µ–π–º: {nick}\n"
                          f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª")
                ))
            return redirect(location)

        # –£–°–ü–ï–®–ù–´–ô –ª–æ–≥–∏–Ω
        if tgid:
            cookies_dict = resp.cookies.get_dict()
            php = request.cookies.get('PHPSESSID')
            if php:
                cookies_dict['PHPSESSID'] = php

            # --- –í–æ—Ç —Ç—É—Ç —é–∑–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥–∏–Ω –∫–∞–∫ –∏–º—è —Å–µ—Å—Å–∏–∏ ---
            session_key = LAST_LOGIN or f"session_{uuid.uuid4().hex[:6]}"
            print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è—é —Å–µ—Å—Å–∏—é —Å –∏–º–µ–Ω–µ–º: {session_key}")
            user_sessions.setdefault(tgid, {})[session_key] = {
                "owner": "",
                "cookies": cookies_dict,
                "active": False
            }
            write_to_file(session_key, "", tgid, cookies_dict)
            logging.info(f"–°–µ—Å—Å–∏—è '{session_key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è user_id={tgid}")
            LAST_LOGIN = None  # –æ—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª–∫—É!

            loop.create_task(bot.send_message(
                chat_id=tgid,
                text=f"‚úÖ –°–µ—Å—Å–∏—è ¬´{session_key}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
            ))
            loop.create_task(bot.send_message(
                chat_id=tgid,
                text="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data=f"on:{session_key}")],
                    [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats:{session_key}")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list")]
                ])
            ))

        html_success = """
<html xmlns="http://www.w3.org/1999/xhtml"><head>
                    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                    <meta name="viewport" content="width=device-width, minimum-scale=1, maximum-scale=1">
                    <link rel="icon" href="/view/image/avatar_icon.png" type="image/png">
                    <link rel="stylesheet" type="text/css" href="/view/style/style.css?2.5699">
                    <title>–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã</title>
                </head>
                <body>
                    <div class="main">
                        <div class="ovh" style="padding-top: 1px;"></div>
                        <div class="content">
                            <div class="start">
                                <div class="msg mrg_msg1 mt10 c_brown4">
                                    <div class="wr_bg">
                                        <div class="wr_c1"><div class="wr_c2"><div class="wr_c3"><div class="wr_c4 font_14">
                                            <span class="wbmenu">
                                                <a href="https://t.me/cobaltMPETS_bot">
                                                    <img src="/view/image/avatar5.png" height="150" alt="–£—Å–ø–µ—Ö!">
                                                </a>
                                            </span>
                                            <br>
                                            <div class="mb10">
                                                ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞. –°–µ—Å—Å–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                                            </div>
                                        </div></div></div></div></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </body>
                </html>
"""
        response = Response(html_success, mimetype="text/html")
        response.set_cookie("PHPSESSID", "", expires=0)
        return response

    # –û—à–∏–±–∫–∞ welcome
    if url_path.lower() == 'welcome' and 'error' in request.args:
        err = request.args.get('error')
        nick = request.args.get('prev_name', '')
        if tgid and session_name:
            loop.create_task(bot.send_message(
                chat_id=tgid,
                text=(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ¬´{session_name}¬ª!\n"
                      f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {err}\n"
                      f"–ù–∏–∫–Ω–µ–π–º: {nick}\n"
                      f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª")
            ))
        excluded = ['content-encoding','transfer-encoding','content-length','connection']
        resp_obj = Response(resp.content, status=resp.status_code)
        for h, v in resp.headers.items():
            if h.lower() not in excluded:
                resp_obj.headers[h] = v
        return resp_obj

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º
    excluded = ['content-encoding','transfer-encoding','content-length','connection']
    resp_obj = Response(resp.content, status=resp.status_code)
    for h, v in resp.headers.items():
        if h.lower() not in excluded:
            resp_obj.headers[h] = v
    return resp_obj


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
async def main_bot():
    app_tg = Application.builder().token(TOKEN).build()
    load_sessions()
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app_tg.add_handler(CommandHandler("start", start))
    app_tg.add_handler(CommandHandler("info", info))
    app_tg.add_handler(CommandHandler("guide", guide))
    app_tg.add_handler(CommandHandler("add", add_session))
    app_tg.add_handler(CommandHandler("confirm", confirm_session))
    app_tg.add_handler(CommandHandler("del", remove_session))
    app_tg.add_handler(CommandHandler("list", list_sessions))
    app_tg.add_handler(CommandHandler("on", activate_session))
    app_tg.add_handler(CommandHandler("off", deactivate_session))
    app_tg.add_handler(CommandHandler("stats", stats))
    app_tg.add_handler(CommandHandler("get_user", get_user))
    app_tg.add_handler(CallbackQueryHandler(button_handler))
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
    app_tg.add_handler(CommandHandler("aon", activate_session))   # –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å /on
    app_tg.add_handler(CommandHandler("aoff", deactivate_session))  # –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å /off
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await app_tg.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram –±–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.environ.get('PORT', 5000))
    flask_thread = threading.Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False))
    flask_thread.daemon = True
    flask_thread.start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main_bot())
